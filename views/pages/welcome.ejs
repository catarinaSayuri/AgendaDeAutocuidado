<!DOCTYPE html>
<html>
<head>
  <title>Agenda de Autocuidado</title>
  <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?display=swap&family=Noto+Sans:wght@400;500;700;900&family=Plus+Jakarta+Sans:wght@400;500;700;800" rel="stylesheet">
  <link rel="stylesheet" href="/css/welcomeStyle.css">
</head>
<body>
  <div class="layout-container">
    <header>
      <div class="header-logo">
        <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g clip-path="url(#clip0_6_330)">
            <path fill-rule="evenodd" clip-rule="evenodd"
              d="M24 0.757355L47.2426 24L24 47.2426L0.757355 24L24 0.757355ZM21 35.7574V12.2426L9.24264 24L21 35.7574Z"
              fill="#561C24"></path>
          </g>
          <defs>
            <clipPath id="clip0_6_330">
              <rect width="48" height="48" fill="white"></rect>
            </clipPath>
          </defs>
        </svg>
        <h2>Agenda de Autocuidado</h2>
      </div>
      <div class="nav-links">
        <a href="/myroutine">Minha Rotina</a>
        <a href="/atividades">Atividades</a>
        <a href="/">Home</a>
      </div>
    </header>
    <div class="content">
      <div class="calendar-container">
        <div class="calendar-header">
          <button id="prev-month">
            <svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" fill="#561C24" viewBox="0 0 256 256">
              <path
                d="M165.66,202.34a8,8,0,0,1-11.32,11.32l-80-80a8,8,0,0,1,0-11.32l80-80a8,8,0,0,1,11.32,11.32L91.31,128Z">
              </path>
            </svg>
          </button>
          <p id="calendar-month"></p>
          <button id="next-month">
            <svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" fill="#561C24" viewBox="0 0 256 256">
              <path
                d="M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z">
              </path>
            </svg>
          </button>
        </div>
        <div class="calendar-grid" id="calendar-grid">
          <p>S</p>
          <p>M</p>
          <p>T</p>
          <p>W</p>
          <p>T</p>
          <p>F</p>
          <p>S</p>
        </div>
      </div>
      <div class="main-content">
        <h3>"O autocuidado não é egoísmo, é essencial."</h3>
        <div class="welcome-section">
          <div class="welcome-text">
            <p id="welcome-user">Bem vindo (a) de volta!</p>
            <p>Aqui está sua agenda de autocuidado para hoje.</p>
          </div>
        </div>
        <h2 class="section-title">Início Rápido</h2>
        <a href="/atividades" class="quick-start-item">
          <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="#561C24" viewBox="0 0 256 256">
              <path
                d="M208,32H184V24a8,8,0,0,0-16,0v8H88V24a8,8,0,0,0-16,0v8H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM72,48v8a8,8,0,0,0,16,0V48h80v8a8,8,0,0,0,16,0V48h24V80H48V48ZM208,208H48V96H208V208Zm-96-88v64a8,8,0,0,1-16,0V132.94l-4.42,2.22a8,8,0,0,1-7.16-14.32l16-8A8,8,0,0,1,112,120Zm59.16,30.45L152,176h16a8,8,0,0,1,0,16H136a8,8,0,0,1-6.4-12.8l28.78-38.37A8,8,0,0,0,145.07,132a8,8,0,1,1-13.85-8A24,24,0,0,1,176,136,23.76,23.76,0,0,1,171.16,150.45Z">
              </path>
            </svg>
          </div>
          <button class="quick-start-button">Crie uma atividade</button>
        </a>
        <a href="/myroutine" class="quick-start-item">
          <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="#561C24" viewBox="0 0 256 256">
              <path
                d="M80,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H88A8,8,0,0,1,80,64Zm136,56H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,64H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM44,52A12,12,0,1,0,56,64,12,12,0,0,0,44,52Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,116Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,180Z">
              </path>
            </svg>
          </div>
          <button class="quick-start-button">Minha Rotina</button>
        </a>
        <h2 class="section-title">Atividades de Hoje</h2>
        <div id="activities-list">
          <div class="activity-item">
            <div class="activity-color" style="background-color: #FF6347;"></div>
            <div class="activity-details">
              <p>Morning Meditation</p>
              <p>8:00 AM - 9:00 AM</p>
            </div>
          </div>
          <div class="activity-item">
            <div class="activity-color" style="background-color: #32CD32;"></div>
            <div class="activity-details">
              <p>Lunch Break</p>
              <p>12:00 PM - 1:00 PM</p>
            </div>
          </div>
          <div class="activity-item">
            <div class="activity-color" style="background-color: #4682B4;"></div>
            <div class="activity-details">
              <p>Evening Yoga</p>
              <p>6:00 PM - 7:00 PM</p>
            </div>
          </div>
        </div>
        <div class="create-button-container">
          <button id="openModalBtn"
            class="flex-row max-width-480 cursor-pointer align-center justify-center overflow-hidden rounded-full height-40 bg-button-bg text-dark gap-8 font-size-14 font-bold leading-normal tracking-wide min-width-0 padding-x-10 hover-bg-hover">
            + Novo Agendamento
          </button>
        </div>
      </div>
    </div>
    <div id="agendamentoModal" class="modal">
      <div class="modal-content">
        <span id="closeButton" class="close-button">×</span>
        <h2 class="text-dark font-size-24 font-bold leading-tight tracking-tight text-center margin-bottom-24">Cadastrar Novo Agendamento</h2>
        <div id="loading" class="loading">Carregando...</div>
        <div id="modalContent" class="hidden">
          <form id="agendamentoForm">
            <input type="hidden" id="id_usuario_hidden" name="id_usuario" value="">
            <div class="form-group">
              <label for="categoria_atividade">Categoria da Atividade:</label>
              <select id="categoria_atividade" name="categoria_atividade" required>
                <option value="">Selecione uma categoria</option>
              </select>
            </div>
            <div class="form-group">
              <label for="id_atividade_select">Atividade:</label>
              <select id="id_atividade_select" name="id_atividade" required disabled>
                <option value="">Selecione uma categoria primeiro</option>
              </select>
            </div>
            <div class="form-group">
              <label for="nome_agendamento">Nome do Agendamento:</label>
              <input type="text" id="nome_agendamento" name="nome_agendamento" placeholder="Ex.: Corrida Matinal" required maxlength="100">
            </div>
            <div class="form-group">
              <label for="descricao">Descrição:</label>
              <textarea id="descricao" name="descricao" placeholder="Ex.: Correr ao ar livre no parque por 30 minutos" rows="4"></textarea>
            </div>
            <div class="form-group">
              <label for="data_agendamento_modal">Data:</label>
              <input type="date" id="data_agendamento_modal" name="data" required>
            </div>
            <div class="form-group">
              <label for="horario_inicio">Hora de Início:</label>
              <input type="time" id="horario_inicio" name="horario_inicio" required>
            </div>
            <div class="form-group">
              <label for="horario_fim">Hora de Fim:</label>
              <input type="time" id="horario_fim" name="horario_fim" required>
            </div>
            <div class="form-group">
              <label for="status">Status:</label>
              <select id="status" name="status">
                <option value="pendente">Pendente</option>
                <option value="concluido">Concluído</option>
                <option value="cancelado">Cancelado</option>
              </select>
            </div>
            <div class="form-actions">
              <button type="submit"
                class="flex-row max-width-480 cursor-pointer align-center justify-center overflow-hidden rounded-full height-40 bg-button-bg text-dark gap-8 font-size-14 font-bold leading-normal tracking-wide min-width-0 padding-x-10 margin-left-auto hover-bg-hover">
                Salvar Agendamento
              </button>
            </div>
          </form>
        </div>
        <div id="form-error" class="text-error font-size-14 margin-top-8 hidden"></div>
      </div>
    </div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const today = new Date();
      let currentMonth = today.getMonth(); // 0-based index (e.g., 5 for June)
      let currentYear = today.getFullYear();
      let currentDay = today.getDate(); // Day of the month
      let currentUserId = null;
      let atividadesDisponiveis = [];

      // Modal handling
      const modal = document.getElementById('agendamentoModal');
      const openModalBtn = document.getElementById('openModalBtn');
      const closeButton = document.getElementById('closeButton');
      const agendamentoForm = document.getElementById('agendamentoForm');
      const categoriaAtividadeSelect = document.getElementById('categoria_atividade');
      const idAtividadeSelect = document.getElementById('id_atividade_select');
      const idUsuarioHidden = document.getElementById('id_usuario_hidden');
      const horarioInicioInput = document.getElementById('horario_inicio');
      const horarioFimInput = document.getElementById('horario_fim');
      const errorDiv = document.getElementById('form-error');
      const loadingDiv = document.getElementById('loading');
      const modalContentDiv = document.getElementById('modalContent');
      const dataAgendamentoModalInput = document.getElementById('data_agendamento_modal');
      const welcomeUserText = document.getElementById('welcome-user');

      openModalBtn.onclick = async function () {
        console.log('Abrindo modal de cadastro');
        modal.style.display = 'flex';
        loadingDiv.style.display = 'block';
        modalContentDiv.classList.add('hidden');
        errorDiv.classList.add('hidden');

        try {
          await loadCategorias();
          await loadAllAtividades();
          setMinDateForModal();
          // Set the date to the selected calendar date
          const selectedButton = document.querySelector('.calendar-grid button.selected');
          if (selectedButton) {
            const day = selectedButton.querySelector('div').textContent.padStart(2, '0');
            const date = `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${day}`;
            dataAgendamentoModalInput.value = date;
          }
          modalContentDiv.classList.remove('hidden');
        } catch (err) {
          console.error('Erro ao preparar o modal:', err);
          errorDiv.textContent = 'Erro ao carregar dados para o agendamento: ' + err.message;
          errorDiv.classList.remove('hidden');
        } finally {
          loadingDiv.style.display = 'none';
        }
      };

      closeButton.onclick = function () {
        modal.style.display = 'none';
        agendamentoForm.reset();
        categoriaAtividadeSelect.innerHTML = '<option value="">Selecione uma categoria</option>';
        idAtividadeSelect.innerHTML = '<option value="">Selecione uma categoria primeiro</option>';
        idAtividadeSelect.disabled = true;
        errorDiv.classList.add('hidden');
        loadingDiv.style.display = 'none';
        modalContentDiv.classList.add('hidden');
      };

      window.onclick = function (event) {
        if (event.target == modal) {
          closeButton.onclick();
        }
      };

      function setMinDateForModal() {
        const today = new Date().toISOString().split('T')[0];
        dataAgendamentoModalInput.setAttribute('min', today);
      }

      async function getUserIdFromSession() {
        try {
          console.log('Buscando ID e nome do usuário da sessão');
          const response = await fetch('/api/user/session', { credentials: 'include' });
          if (!response.ok) {
            if (response.status === 401) {
              console.error('Erro 401: Sessão inválida, redirecionando para /login');
              window.location.href = '/login';
              return null;
            }
            const errorData = await response.json();
            throw new Error(errorData.error || `Erro HTTP ${response.status}: ${response.statusText}`);
          }
          const data = await response.json();
          console.log('Dados do usuário recebidos:', data);
          if (!data.id_usuario) {
            console.error('ID do usuário não encontrado na resposta');
            welcomeUserText.textContent = 'Bem vindo (a) de volta! Erro ao carregar usuário.';
            return null;
          }
          currentUserId = data.id_usuario;
          idUsuarioHidden.value = data.id_usuario;
          if (data.nome && data.nome.trim() !== '') {
            console.log('Nome do usuário encontrado:', data.nome);
            welcomeUserText.textContent = `Bem vindo (a) de volta, ${data.nome}!`;
          } else {
            console.warn('Nome do usuário não disponível ou vazio');
            welcomeUserText.textContent = 'Bem vindo (a) de volta!';
          }
          return data.id_usuario;
        } catch (error) {
          console.error('Erro ao buscar dados do usuário:', error.message);
          welcomeUserText.textContent = 'Bem vindo (a) de volta! Erro ao carregar usuário.';
          window.location.href = '/login';
          return null;
        }
      }

      async function loadCategorias() {
        console.log('Iniciando requisição para /api/atividade/categorias');
        errorDiv.classList.add('hidden');
        const response = await fetch('/api/atividade/categorias', { credentials: 'include' });
        console.log('Resposta recebida categorias:', response.status, response.statusText);
        if (!response.ok) {
          if (response.status === 401) {
            throw new Error('Não autorizado. Redirecionando para login.');
          }
          const errorData = await response.json();
          throw new Error(errorData.error || `Erro ao carregar categorias: ${response.statusText}`);
        }
        const categorias = await response.json();
        console.log('Categorias recebidas:', categorias);
        categoriaAtividadeSelect.innerHTML = '<option value="">Selecione uma categoria</option>';
        if (Array.isArray(categorias) && categorias.length > 0) {
          categorias.forEach(cat => {
            const option = document.createElement('option');
            option.value = cat.categoria;
            option.textContent = cat.categoria;
            categoriaAtividadeSelect.appendChild(option);
          });
        } else {
          const option = document.createElement('option');
          option.value = '';
          option.textContent = 'Nenhuma categoria disponível';
          option.disabled = true;
          categoriaAtividadeSelect.appendChild(option);
        }
      }

      async function loadAllAtividades() {
        console.log('Iniciando requisição para /api/atividade/usuario');
        errorDiv.classList.add('hidden');
        const response = await fetch('/api/atividade/usuario', { credentials: 'include' });
        console.log('Resposta recebida atividades:', response.status, response.statusText);
        if (!response.ok) {
          if (response.status === 401) {
            throw new Error('Não autorizado. Redirecionando para login.');
          }
          const errorData = await response.json();
          throw new Error(errorData.error || `Erro ao carregar atividades: ${response.statusText}`);
        }
        atividadesDisponiveis = await response.json();
        console.log('Atividades recebidas:', atividadesDisponiveis);
      }

      async function loadAgendamentosForSelectedDate(userId, date) {
        console.log('Buscando agendamentos para userId:', userId, 'data:', date);
        try {
          const response = await fetch(`/api/agendamentos/dia?data=${date}`, { credentials: 'include' });
          if (!response.ok) {
            if (response.status === 401) {
              window.location.href = '/login';
              return;
            }
            throw new Error(`Erro ao buscar agendamentos do dia: ${response.statusText}`);
          }
          const agendamentos = await response.json();
          console.log('Agendamentos recebidos:', agendamentos);
          renderActivities(agendamentos, date);
        } catch (error) {
          console.error('Erro ao carregar agendamentos:', error.message);
          renderActivities([], date);
        }
      }

      function formatTime(time) {
        if (!time) return 'Sem horário';
        return time.substring(0, 5); // HH:MM
      }

      function renderActivities(agendamentos, date) {
        const activitiesList = document.getElementById('activities-list');
        activitiesList.innerHTML = '';
        if (!agendamentos || agendamentos.length === 0) {
          activitiesList.innerHTML = '<p>Nenhum agendamento marcado para essa data.</p>';
        } else {
          agendamentos.forEach(agendamento => {
            const activityItem = document.createElement('div');
            activityItem.className = 'activity-item';
            const color = agendamento.atividade_cor_categoria || '#994D4F';
            activityItem.innerHTML = `
              <div class="activity-color" style="background-color: ${color};"></div>
              <div class="activity-details">
                <p>${agendamento.nome_agendamento || 'Agendamento sem nome'}</p>
                <p>${formatTime(agendamento.horario_inicio)} - ${formatTime(agendamento.horario_fim)}</p>
              </div>
            `;
            activitiesList.appendChild(activityItem);
          });
        }
      }

      categoriaAtividadeSelect.addEventListener('change', () => {
        const selectedCategory = categoriaAtividadeSelect.value;
        console.log('Categoria selecionada:', selectedCategory);
        idAtividadeSelect.innerHTML = '<option value="">Selecione uma atividade</option>';
        idAtividadeSelect.disabled = !selectedCategory;

        if (selectedCategory) {
          const filteredActivities = atividadesDisponiveis.filter(act => act.categoria === selectedCategory);
          console.log('Atividades filtradas:', filteredActivities);
          if (filteredActivities.length > 0) {
            filteredActivities.forEach(act => {
              const option = document.createElement('option');
              option.value = act.id_atividade;
              option.textContent = act.nome;
              idAtividadeSelect.appendChild(option);
            });
          } else {
            idAtividadeSelect.innerHTML = '<option value="">Nenhuma atividade para esta categoria</option>';
            idAtividadeSelect.disabled = true;
          }
        }
      });

      horarioFimInput.addEventListener('change', () => {
        const inicio = horarioInicioInput.value;
        const fim = horarioFimInput.value;
        if (inicio && fim && fim <= inicio) {
          errorDiv.textContent = 'Hora de fim deve ser posterior à hora de início.';
          errorDiv.classList.remove('hidden');
        } else {
          errorDiv.classList.add('hidden');
        }
      });

      idAtividadeSelect.addEventListener('change', () => {
        const selectedActivityId = idAtividadeSelect.value;
        console.log('Atividade selecionada ID:', selectedActivityId);
        if (selectedActivityId) {
          const selectedActivity = atividadesDisponiveis.find(act => act.id_atividade == selectedActivityId);
          if (selectedActivity) {
            document.getElementById('nome_agendamento').value = selectedActivity.nome;
          }
        } else {
          document.getElementById('nome_agendamento').value = '';
        }
      });

      agendamentoForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        errorDiv.classList.add('hidden');
        loadingDiv.style.display = 'block';

        const id_usuario = parseInt(idUsuarioHidden.value);
        const id_atividade = parseInt(idAtividadeSelect.value);
        const nome_agendamento = document.getElementById('nome_agendamento').value.trim();
        const descricao = document.getElementById('descricao').value.trim() || null;
        const data = dataAgendamentoModalInput.value;
        const horario_inicio = horarioInicioInput.value;
        const horario_fim = horarioFimInput.value;
        const status = document.getElementById('status').value;

        console.log('Enviando agendamento:', { id_usuario, id_atividade, nome_agendamento, data, horario_inicio, horario_fim, status });

        if (isNaN(id_usuario)) {
          errorDiv.textContent = 'ID de usuário inválido. Por favor, faça login novamente.';
          errorDiv.classList.remove('hidden');
          loadingDiv.style.display = 'none';
          return;
        }
        if (isNaN(id_atividade)) {
          errorDiv.textContent = 'Por favor, selecione uma atividade válida.';
          errorDiv.classList.remove('hidden');
          loadingDiv.style.display = 'none';
          return;
        }
        if (!nome_agendamento) {
          errorDiv.textContent = 'Nome do agendamento é obrigatório.';
          errorDiv.classList.remove('hidden');
          loadingDiv.style.display = 'none';
          return;
        }
        if (horario_fim <= horario_inicio) {
          errorDiv.textContent = 'Hora de fim deve ser posterior à hora de início.';
          errorDiv.classList.remove('hidden');
          loadingDiv.style.display = 'none';
          return;
        }

        const agendamentoData = {
          id_usuario,
          id_atividade,
          nome_agendamento,
          data,
          descricao,
          horario_inicio,
          horario_fim,
          status
        };

        try {
          const response = await fetch('/api/agendamento', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(agendamentoData),
            credentials: 'include'
          });

          if (!response.ok) {
            if (response.status === 401) {
              window.location.href = '/login';
              return;
            }
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao salvar agendamento');
          }

          const newAgendamento = await response.json();
          console.log('Agendamento criado:', newAgendamento);
          closeButton.onclick();
          const selectedButton = document.querySelector('.calendar-grid button.selected');
          if (selectedButton) {
            const day = selectedButton.querySelector('div').textContent.padStart(2, '0');
            const date = `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${day}`;
            await loadAgendamentosForSelectedDate(currentUserId, date);
          }
          alert('Agendamento salvo com sucesso!');
        } catch (error) {
          console.error('Erro ao salvar agendamento:', error.message);
          errorDiv.textContent = error.message;
          errorDiv.classList.remove('hidden');
        } finally {
          loadingDiv.style.display = 'none';
        }
      });

      // Calendar navigation
      function updateCalendar() {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        document.getElementById('calendar-month').textContent = `${monthNames[currentMonth]} ${currentYear}`;
        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
        const firstDay = new Date(currentYear, currentMonth, 1).getDay();
        const calendarGrid = document.getElementById('calendar-grid');
        calendarGrid.innerHTML = '<p>S</p><p>M</p><p>T</p><p>W</p><p>T</p><p>F</p><p>S</p>';

        // Add empty cells for days before the first day of the month
        for (let i = 0; i < firstDay; i++) {
          const emptyCell = document.createElement('button');
          emptyCell.innerHTML = '<div></div>';
          calendarGrid.appendChild(emptyCell);
        }

        // Add days of the month
        for (let day = 1; day <= daysInMonth; day++) {
          const button = document.createElement('button');
          button.innerHTML = `<div>${day}</div>`;
          if (day === currentDay && currentMonth === today.getMonth() && currentYear === today.getFullYear()) {
            button.classList.add('selected');
          }
          calendarGrid.appendChild(button);
        }
      }

      document.getElementById('prev-month').addEventListener('click', () => {
        currentMonth--;
        if (currentMonth < 0) {
          currentMonth = 11;
          currentYear--;
        }
        updateCalendar();
        initializeCalendarButtons();
      });

      document.getElementById('next-month').addEventListener('click', () => {
        currentMonth++;
        if (currentMonth > 11) {
          currentMonth = 0;
          currentYear++;
        }
        updateCalendar();
        initializeCalendarButtons();
      });

      function initializeCalendarButtons() {
        const calendarButtons = document.querySelectorAll('.calendar-grid button');
        calendarButtons.forEach(button => {
          const dayDiv = button.querySelector('div');
          if (dayDiv.textContent) {
            button.addEventListener('click', () => {
              calendarButtons.forEach(btn => btn.classList.remove('selected'));
              button.classList.add('selected');
              currentDay = parseInt(dayDiv.textContent);
              const date = `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${dayDiv.textContent.padStart(2, '0')}`;
              console.log(`Selected date: ${date}`);
              if (currentUserId) {
                loadAgendamentosForSelectedDate(currentUserId, date);
              }
            });
          }
        });
      }

      // Initialize page
      async function initializePage() {
        const userId = await getUserIdFromSession();
        if (userId) {
          await loadAllAtividades();
          const date = `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}`;
          await loadAgendamentosForSelectedDate(userId, date);
        }
        updateCalendar();
        initializeCalendarButtons();
      }

      initializePage();
    });
  </script>
</body>
</html>