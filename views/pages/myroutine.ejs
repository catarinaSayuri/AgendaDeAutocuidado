<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
  <link rel="stylesheet" as="style" onload="this.rel='stylesheet'"
    href="https://fonts.googleapis.com/css2?display=swap&family=Noto+Sans%3Awght%40400%3B500%3B700%3B900&family=Plus+Jakarta+Sans%3Awght%40400%3B500%3B700%3B800" />
  <title>Minha Rotina</title>
  <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />
  <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
  <link rel="stylesheet" href="/css/myroutineStyle.css">
</head>
<body>
  <div class="relative flex size-full min-h-screen flex-col bg-[--background-primary] group/design-root overflow-x-hidden">
    <div class="layout-container flex h-full grow flex-col">
      <header class="flex items-center justify-between whitespace-nowrap border-b border-solid border-b-[--border-color] px-10 py-3">
        <div class="flex items-center gap-4 text-[--text-dark]">
          <div class="size-4">
            <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_6_330)">
                <path fill-rule="evenodd" clip-rule="evenodd"
                  d="M24 0.757355L47.2426 24L24 47.2426L0.757355 24L24 0.757355ZM21 35.7574V12.2426L9.24264 24L21 35.7574Z"
                  fill="currentColor"></path>
              </g>
              <defs>
                <clipPath id="clip0_6_330">
                  <rect width="48" height="48" fill="white"></rect>
                </clipPath>
              </defs>
            </svg>
          </div>
          <h2 class="text-[--text-dark] text-lg font-bold leading-tight tracking-[-0.015em]">Minha Rotina</h2>
        </div>
        <div class="flex flex-1 justify-end gap-8">
          <div class="flex items-center gap-9">
            <a class="text-[--text-dark] text-sm font-medium leading-normal hover:underline" href="/myroutine">Minha Rotina</a>
            <a class="text-[--text-dark] text-sm font-medium leading-normal hover:underline" href="/atividades">Atividades</a>
            <a class="text-[--text-dark] text-sm font-medium leading-normal hover:underline" href="/">Home</a>
          </div>
        </div>
      </header>
      <div class="px-10 flex flex-1 justify-center py-5">
        <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
          <div class="flex flex-wrap justify-between gap-3 p-4">
            <div class="flex min-w-72 flex-col gap-3">
              <p class="text-[--text-dark] tracking-light text-[32px] font-bold leading-tight">Agendamentos do dia</p>
              <p class="text-[--text-secondary] text-sm font-normal leading-normal">
                Sua rotina personalizada. Ajuste as atividades e horários conforme suas necessidades.
              </p>
            </div>
          </div>
          <button id="openModalBtn"
            class="flex max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-full h-10 bg-[--button-bg] text-[--text-dark] gap-2 text-sm font-bold leading-normal tracking-[0.015em] min-w-0 px-2.5 mx-auto mb-6 hover:bg-[--hover-bg]">
            + Novo Agendamento
          </button>
          <h3 class="text-[--text-dark] text-lg font-bold leading-tight tracking-[-0.015em] px-4 pb-2 pt-4 border-b border-solid border-b-[--border-color]">
            Manhã (00:00 - 11:59)</h3>
          <div id="agendamentosManha" class="flex flex-col gap-2 p-4">
            <p class="text-[--text-secondary] text-sm font-normal leading-normal italic text-center">Nenhum agendamento para a manhã.</p>
          </div>
          <h3 class="text-[--text-dark] text-lg font-bold leading-tight tracking-[-0.015em] px-4 pb-2 pt-4 border-b border-solid border-b-[--border-color]">
            Tarde (12:00 - 17:59)</h3>
          <div id="agendamentosTarde" class="flex flex-col gap-2 p-4">
            <p class="text-[--text-secondary] text-sm font-normal leading-normal italic text-center">Nenhum agendamento para a tarde.</p>
          </div>
          <h3 class="text-[--text-dark] text-lg font-bold leading-tight tracking-[-0.015em] px-4 pb-2 pt-4 border-b border-solid border-b-[--border-color]">
            Noite (18:00 - 23:59)</h3>
          <div id="agendamentosNoite" class="flex flex-col gap-2 p-4">
            <p class="text-[--text-secondary] text-sm font-normal leading-normal italic text-center">Nenhum agendamento para a noite.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="agendamentoModal" class="modal">
    <div class="modal-content">
      <span id="closeButton" class="close-button">×</span>
      <h2 class="text-[--text-dark] text-2xl font-bold leading-tight tracking-[-0.015em] text-center mb-6">Cadastrar Novo Agendamento</h2>
      <div id="loading" class="loading">Carregando...</div>
      <div id="modalContent" class="hidden"> <form id="agendamentoForm">
          <input type="hidden" id="id_usuario_hidden" name="id_usuario" value="">
          <div class="form-group">
            <label for="categoria_atividade">Categoria da Atividade:</label>
            <select id="categoria_atividade" name="categoria_atividade" required>
              <option value="">Selecione uma categoria</option>
            </select>
          </div>
          <div class="form-group">
            <label for="id_atividade_select">Atividade:</label>
            <select id="id_atividade_select" name="id_atividade" required disabled>
              <option value="">Selecione uma categoria primeiro</option>
            </select>
          </div>
          <div class="form-group">
            <label for="nome_agendamento">Nome do Agendamento:</label>
            <input type="text" id="nome_agendamento" name="nome_agendamento" placeholder="Ex.: Corrida Matinal" required maxlength="100">
          </div>
          <div class="form-group">
            <label for="descricao">Descrição:</label>
            <textarea id="descricao" name="descricao" placeholder="Ex.: Correr ao ar livre no parque por 30 minutos" rows="4"></textarea>
          </div>
          <div class="form-group">
            <label for="data">Data:</label>
            <input type="date" id="data" name="data" required>
          </div>
          <div class="form-group">
            <label for="horario_inicio">Hora de Início:</label>
            <input type="time" id="horario_inicio" name="horario_inicio" required>
          </div>
          <div class="form-group">
            <label for="horario_fim">Hora de Fim:</label>
            <input type="time" id="horario_fim" name="horario_fim" required>
          </div>
          <div class="form-group">
            <label for="status">Status:</label>
            <select id="status" name="status">
              <option value="pendente">Pendente</option>
              <option value="concluido">Concluído</option>
              <option value="cancelado">Cancelado</option>
            </select>
          </div>
          <div class="form-actions">
            <button type="submit"
              class="flex max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-full h-10 bg-[--button-bg] text-[--text-dark] gap-2 text-sm font-bold leading-normal tracking-[0.015em] min-w-0 px-2.5 ml-auto hover:bg-[--hover-bg]">
              Salvar Agendamento
            </button>
          </div>
        </form>
      </div>
      <div id="form-error" class="text-red-600 text-sm mt-2 hidden"></div>
    </div>
  </div>
  <script>
    const modal = document.getElementById('agendamentoModal');
    const openModalBtn = document.getElementById('openModalBtn');
    const closeButton = document.getElementById('closeButton');
    const agendamentoForm = document.getElementById('agendamentoForm');
    const categoriaAtividadeSelect = document.getElementById('categoria_atividade');
    const idAtividadeSelect = document.getElementById('id_atividade_select');
    const idUsuarioHidden = document.getElementById('id_usuario_hidden');
    const horarioInicioInput = document.getElementById('horario_inicio');
    const horarioFimInput = document.getElementById('horario_fim');
    const errorDiv = document.getElementById('form-error');
    const loadingDiv = document.getElementById('loading');
    const modalContentDiv = document.getElementById('modalContent'); // Novo elemento
    let atividadesDisponiveis = [];

    // Função para abrir o modal
    openModalBtn.onclick = async function () {
      console.log('Abrindo modal de cadastro');
      modal.style.display = 'flex';
      loadingDiv.style.display = 'block'; // Mostra o "Carregando..."
      modalContentDiv.classList.add('hidden'); // Esconde o formulário
      errorDiv.classList.add('hidden');

      try {
        await loadCategorias();
        await loadAllAtividades();
        setMinDate();
        modalContentDiv.classList.remove('hidden'); // Mostra o formulário
      } catch (err) {
        console.error('Erro ao preparar o modal:', err);
        errorDiv.textContent = 'Erro ao carregar dados para o agendamento: ' + err.message;
        errorDiv.classList.remove('hidden');
        // Você pode querer fechar o modal ou deixá-lo com a mensagem de erro
        // closeButton.onclick();
      } finally {
        loadingDiv.style.display = 'none'; // Esconde o "Carregando..."
      }
    }

    // Função para fechar o modal
    closeButton.onclick = function () {
      modal.style.display = 'none';
      agendamentoForm.reset();
      categoriaAtividadeSelect.innerHTML = '<option value="">Selecione uma categoria</option>';
      idAtividadeSelect.innerHTML = '<option value="">Selecione uma categoria primeiro</option>';
      idAtividadeSelect.disabled = true;
      errorDiv.classList.add('hidden');
      loadingDiv.style.display = 'none';
      modalContentDiv.classList.add('hidden'); // Garante que o formulário está escondido ao fechar
    }

    // Fecha o modal ao clicar fora dele
    window.onclick = function (event) {
      if (event.target == modal) {
        closeButton.onclick();
      }
    }

    // Define a data mínima como hoje
    function setMinDate() {
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('data').setAttribute('min', today);
    }

    // Função para obter o ID do usuário da sessão
    async function getUserIdFromSession() {
      try {
        console.log('Buscando ID do usuário da sessão');
        const response = await fetch('/api/user/session', { credentials: 'include' });
        if (!response.ok) {
          if (response.status === 401) {
            console.log('Erro 401: Redirecionando para /login');
            window.location.href = '/login';
            return null;
          }
          throw new Error('Erro ao obter ID do usuário da sessão');
        }
        const data = await response.json();
        console.log('ID do usuário da sessão:', data.id_usuario);
        idUsuarioHidden.value = data.id_usuario;
        return data.id_usuario;
      } catch (error) {
        console.error('Erro ao buscar ID do usuário:', error.message);
        window.location.href = '/login';
        return null;
      }
    }

    // Função para formatar a data para exibir
    function formatDate(date) {
      if (!date) return 'Sem data';
      const d = new Date(date);
      if (isNaN(d.getTime())) return 'Data inválida';
      const year = d.getFullYear();
      const month = String(d.getMonth() + 1).padStart(2, '0');
      const day = String(d.getDate()).padStart(2, '0');
      return `${day}/${month}/${year}`;
    }

    // Função para carregar agendamentos do dia atual
    async function loadAgendamentosForToday(userId) {
      const today = new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, '0');
      const day = String(today.getDate()).padStart(2, '0');
      const formattedDate = `${year}-${month}-${day}`;
      console.log('Buscando agendamentos para userId:', userId, 'data:', formattedDate);
      try {
        const response = await fetch(`/api/agendamentos/dia?data=${formattedDate}`, { credentials: 'include' });
        if (!response.ok) {
          if (response.status === 401) {
            window.location.href = '/login';
            return;
          }
          throw new Error(`Erro ao buscar agendamentos do dia: ${response.statusText}`);
        }
        const agendamentos = await response.json();
        console.log('Agendamentos recebidos:', agendamentos);
        renderAgendamentos(agendamentos);
      } catch (error) {
        console.error('Erro ao carregar agendamentos:', error.message);
        // Não usamos errorDiv aqui para evitar conflito com o modal.
        // Considere um alert ou uma mensagem na própria tela principal, se necessário.
      }
    }

    // Função para renderizar os agendamentos na tela
    function renderAgendamentos(agendamentos) {
      console.log('Renderizando agendamentos:', agendamentos);
      const manhaDiv = document.getElementById('agendamentosManha');
      const tardeDiv = document.getElementById('agendamentosTarde');
      const noiteDiv = document.getElementById('agendamentosNoite');
      manhaDiv.innerHTML = '<p class="text-[--text-secondary] text-sm font-normal leading-normal italic text-center">Nenhum agendamento para a manhã.</p>';
      tardeDiv.innerHTML = '<p class="text-[--text-secondary] text-sm font-normal leading-normal italic text-center">Nenhum agendamento para a tarde.</p>';
      noiteDiv.innerHTML = '<p class="text-[--text-secondary] text-sm font-normal leading-normal italic text-center">Nenhum agendamento para a noite.</p>';
      let hasManha = false, hasTarde = false, hasNoite = false;

      if (!Array.isArray(agendamentos) || agendamentos.length === 0) {
        console.log('Nenhum agendamento para renderizar');
        return;
      }

      agendamentos.forEach(agendamento => {
        console.log('Processando agendamento:', agendamento);
        const card = createAgendamentoCard(agendamento);
        const [hour] = (agendamento.horario_inicio || '00:00').split(':').map(Number);
        if (hour >= 0 && hour < 12) {
          if (!hasManha) { manhaDiv.innerHTML = ''; hasManha = true; }
          manhaDiv.appendChild(card);
        } else if (hour >= 12 && hour < 18) {
          if (!hasTarde) { tardeDiv.innerHTML = ''; hasTarde = true; }
          tardeDiv.appendChild(card);
        } else {
          if (!hasNoite) { noiteDiv.innerHTML = ''; hasNoite = true; }
          noiteDiv.appendChild(card);
        }
      });
    }

    // Função para criar o card de agendamento
    function createAgendamentoCard(agendamento) {
      const card = document.createElement('div');
      card.className = 'agendamento-card';
      // Correção: Use agendamento.id_agendamento para o ID do agendamento
      card.dataset.id = agendamento.id_agendamento;
      card.innerHTML = `
        <h4>${agendamento.nome_agendamento || 'Agendamento sem nome'}</h4>
        <p>Atividade: ${agendamento.atividade_nome || 'Sem atividade'}</p>
        <p>${agendamento.descricao || 'Sem descrição'}</p>
        <div class="time-status">
          <span>Data: ${formatDate(agendamento.data)}</span>
          <span>Início: ${agendamento.horario_inicio || 'Sem horário'}</span>
          <span>Fim: ${agendamento.horario_fim || 'Sem horário'}</span>
        </div>
        <div class="time-status">
          <span>Status: ${agendamento.status || 'Pendente'}</span>
        </div>
        <span class="category-tag" style="background-color: ${agendamento.atividade_cor_categoria || '#6c757d'};">
          ${agendamento.atividade_categoria || 'Sem Categoria'}
        </span>
      `;
      return card;
    }

    // Função para carregar categorias de atividades
    async function loadCategorias() {
      console.log('Iniciando requisição para /api/atividade/categorias');
      errorDiv.classList.add('hidden');
      const response = await fetch('/api/atividade/categorias', { credentials: 'include' });
      console.log('Resposta recebida categorias:', response.status, response.statusText);
      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Não autorizado. Redirecionando para login.');
        }
        const errorData = await response.json();
        throw new Error(errorData.error || `Erro ao carregar categorias: ${response.statusText}`);
      }
      const categorias = await response.json();
      console.log('Categorias recebidas:', categorias);
      categoriaAtividadeSelect.innerHTML = '<option value="">Selecione uma categoria</option>';
      if (!Array.isArray(categorias) || categorias.length === 0) {
        console.log('Nenhuma categoria retornada');
        // Não joga erro aqui, apenas mostra a mensagem no select se não houver categorias
        // errorDiv.textContent = 'Nenhuma categoria disponível. Cadastre uma atividade com categoria.';
        // errorDiv.classList.remove('hidden');
      } else {
        categorias.forEach(cat => {
          console.log('Adicionando categoria:', cat);
          const option = document.createElement('option');
          option.value = cat.categoria;
          option.textContent = cat.categoria;
          categoriaAtividadeSelect.appendChild(option);
        });
      }
    }

    // Função para carregar todas as atividades do usuário logado
    async function loadAllAtividades() {
      console.log('Iniciando requisição para /api/atividade/usuario');
      errorDiv.classList.add('hidden');
      const response = await fetch('/api/atividade/usuario', { credentials: 'include' });
      console.log('Resposta recebida atividades:', response.status, response.statusText);
      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Não autorizado. Redirecionando para login.');
        }
        const errorData = await response.json();
        throw new Error(errorData.error || `Erro ao carregar atividades: ${response.statusText}`);
      }
      atividadesDisponiveis = await response.json();
      console.log('Atividades recebidas:', atividadesDisponiveis);
      if (atividadesDisponiveis.length === 0) {
        // Não joga erro aqui, apenas mostra a mensagem no select se não houver atividades
        // errorDiv.textContent = 'Nenhuma atividade disponível. Cadastre uma atividade primeiro.';
        // errorDiv.classList.remove('hidden');
      }
    }

    // Event listener para quando a categoria mudar
    categoriaAtividadeSelect.addEventListener('change', () => {
      const selectedCategory = categoriaAtividadeSelect.value;
      console.log('Categoria selecionada:', selectedCategory);
      idAtividadeSelect.innerHTML = '<option value="">Selecione uma atividade</option>';
      idAtividadeSelect.disabled = !selectedCategory;
      if (selectedCategory) {
        const filteredActivities = atividadesDisponiveis.filter(act => act.categoria === selectedCategory);
        console.log('Atividades filtradas:', filteredActivities);
        if (filteredActivities.length > 0) {
          filteredActivities.forEach(act => {
            const option = document.createElement('option');
            option.value = act.id_atividade;
            option.textContent = act.nome;
            idAtividadeSelect.appendChild(option);
          });
        } else {
          idAtividadeSelect.innerHTML = '<option value="">Nenhuma atividade para esta categoria</option>';
          // Não desabilite se não houver atividades, mas mantenha a opção de seleção
        }
      }
    });

    // Validação de horários
    horarioFimInput.addEventListener('change', () => {
      const inicio = horarioInicioInput.value;
      const fim = horarioFimInput.value;
      if (inicio && fim && fim <= inicio) {
        errorDiv.textContent = 'Hora de fim deve ser posterior à hora de início.';
        errorDiv.classList.remove('hidden');
        // Você pode querer limpar o campo de fim ou ajustar o foco
        // horarioFimInput.value = '';
      } else {
        errorDiv.classList.add('hidden');
      }
    });

    // Sugestão de nome do agendamento
    idAtividadeSelect.addEventListener('change', () => {
      const selectedActivityId = idAtividadeSelect.value;
      console.log('Atividade selecionada ID:', selectedActivityId);
      if (selectedActivityId) {
        const selectedActivity = atividadesDisponiveis.find(act => act.id_atividade == selectedActivityId);
        if (selectedActivity) {
          document.getElementById('nome_agendamento').value = selectedActivity.nome;
        }
      } else {
        document.getElementById('nome_agendamento').value = '';
      }
    });

    // Submissão do formulário de agendamento
    agendamentoForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      errorDiv.classList.add('hidden');
      loadingDiv.style.display = 'block'; // Mostra o loading ao submeter

      const id_usuario = parseInt(idUsuarioHidden.value);
      const id_atividade = parseInt(idAtividadeSelect.value);
      const nome_agendamento = document.getElementById('nome_agendamento').value.trim();
      const descricao = document.getElementById('descricao').value.trim() || null;
      const data = document.getElementById('data').value;
      const horario_inicio = document.getElementById('horario_inicio').value;
      const horario_fim = document.getElementById('horario_fim').value;
      const status = document.getElementById('status').value;

      console.log('Enviando agendamento:', { id_usuario, id_atividade, nome_agendamento, data, horario_inicio, horario_fim, status });

      if (isNaN(id_usuario)) {
        errorDiv.textContent = 'ID de usuário inválido. Por favor, faça login novamente.';
        errorDiv.classList.remove('hidden');
        loadingDiv.style.display = 'none';
        return;
      }
      if (isNaN(id_atividade)) {
        errorDiv.textContent = 'Por favor, selecione uma atividade válida.';
        errorDiv.classList.remove('hidden');
        loadingDiv.style.display = 'none';
        return;
      }
      if (!nome_agendamento) {
        errorDiv.textContent = 'Nome do agendamento é obrigatório.';
        errorDiv.classList.remove('hidden');
        loadingDiv.style.display = 'none';
        return;
      }
      if (horario_fim <= horario_inicio) {
        errorDiv.textContent = 'Hora de fim deve ser posterior à hora de início.';
        errorDiv.classList.remove('hidden');
        loadingDiv.style.display = 'none';
        return;
      }

      const agendamentoData = {
        id_usuario,
        id_atividade,
        nome_agendamento,
        data,
        descricao,
        horario_inicio,
        horario_fim,
        status
      };

      try {
        const response = await fetch('/api/agendamento', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(agendamentoData),
          credentials: 'include'
        });

        if (!response.ok) {
          if (response.status === 401) {
            window.location.href = '/login';
            return;
          }
          const errorData = await response.json();
          throw new Error(errorData.error || 'Erro ao salvar agendamento');
        }

        const newAgendamento = await response.json();
        console.log('Agendamento criado:', newAgendamento);
        closeButton.onclick(); // Fecha o modal
        const currentUserId = idUsuarioHidden.value; // Pega o ID do usuário que já está no input hidden
        await loadAgendamentosForToday(currentUserId); // Recarrega os agendamentos do dia
        alert('Agendamento salvo com sucesso!');
      } catch (error) {
        console.error('Erro ao salvar agendamento:', error.message);
        errorDiv.textContent = error.message;
        errorDiv.classList.remove('hidden');
      } finally {
        loadingDiv.style.display = 'none';
      }
    });

    // Inicialização
    document.addEventListener('DOMContentLoaded', async () => {
      console.log('Inicializando página myroutine');
      const userId = await getUserIdFromSession();
      if (userId) {
        await loadAllAtividades();
        await loadAgendamentosForToday(userId);
      }
      setMinDate();
    });
  </script>
</body>
</html>