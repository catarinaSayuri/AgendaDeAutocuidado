<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?display=swap&family=Noto+Sans%3Awght%40400%3B500%3B700%3B900&family=Plus+Jakarta+Sans%3Awght%40400%3B500%3B700%3B800" />
  <title>Minha Rotina</title>
  <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />
  <link rel="stylesheet" href="/css/myroutineStyle.css">
</head>
<body>
  <div class="layout-container">
    <header>
      <div class="header-logo">
        <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g clip-path="url(#clip0_6_330)">
            <path fill-rule="evenodd" clip-rule="evenodd"
              d="M24 0.757355L47.2426 24L24 47.2426L0.757355 24L24 0.757355ZM21 35.7574V12.2426L9.24264 24L21 35.7574Z"
              fill="#561C24"></path>
          </g>
          <defs>
            <clipPath id="clip0_6_330">
              <rect width="48" height="48" fill="white"></rect>
            </clipPath>
          </defs>
        </svg>
        <h2>Agenda de Autocuidado</h2>
      </div>
      <div class="nav-links">
        <a href="/myroutine">Minha Rotina</a>
        <a href="/atividades">Atividades</a>
        <a href="/">Home</a>
      </div>
    </header>
    <div class="content">
      <div class="calendar-container">
        <div class="calendar-header">
          <button id="prev-month">
            <svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" fill="#561C24" viewBox="0 0 256 256">
              <path
                d="M165.66,202.34a8,8,0,0,1-11.32,11.32l-80-80a8,8,0,0,1,0-11.32l80-80a8,8,0,0,1,11.32,11.32L91.31,128Z">
              </path>
            </svg>
          </button>
          <p id="calendar-month"></p>
          <button id="next-month">
            <svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" fill="#561C24" viewBox="0 0 256 256">
              <path
                d="M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z">
              </path>
            </svg>
          </button>
        </div>
        <div class="calendar-grid" id="calendar-grid">
          <p>S</p>
          <p>M</p>
          <p>T</p>
          <p>W</p>
          <p>T</p>
          <p>F</p>
          <p>S</p>
        </div>
      </div>
      <div class="main-content">
        <div class="welcome-section">
          <div class="welcome-text">
            <p class="text-dark font-size-32 font-bold leading-tight tracking-light">Agendamentos do dia</p>
            <p class="text-secondary font-size-14 font-normal leading-normal">
              Sua rotina personalizada. Ajuste as atividades e horários conforme suas necessidades.
            </p>
          </div>
        </div>
        <button id="openModalBtn"
          class="flex-row max-width-480 cursor-pointer align-center justify-center overflow-hidden rounded-full height-40 bg-button-bg text-dark gap-8 font-size-14 font-bold leading-normal tracking-wide min-width-0 padding-x-10 margin-bottom-24 hover-bg-hover">
          Adicionar agendamento
        </button>
        <h3 class="text-dark font-size-22 font-bold leading-tight tracking-tight padding-x-16 padding-bottom-8 padding-top-16">
          Manhã (00:00 - 11:59)
        </h3>
        <div class="agendamento-section">
          <div id="agendamentosManha" class="flex-column gap-8 padding-16">
            <p class="text-secondary font-size-14 font-normal leading-normal italic text-center">Nenhum agendamento para a manhã.</p>
          </div>
        </div>
        <h3 class="text-dark font-size-22 font-bold leading-tight tracking-tight padding-x-16 padding-bottom-8 padding-top-16">
          Tarde (12:00 - 17:59)
        </h3>
        <div class="agendamento-section">
          <div id="agendamentosTarde" class="flex-column gap-8 padding-16">
            <p class="text-secondary font-size-14 font-normal leading-normal italic text-center">Nenhum agendamento para a tarde.</p>
          </div>
        </div>
        <h3 class="text-dark font-size-22 font-bold leading-tight tracking-tight padding-x-16 padding-bottom-8 padding-top-16">
          Noite (18:00 - 23:59)
        </h3>
        <div class="agendamento-section">
          <div id="agendamentosNoite" class="flex-column gap-8 padding-16">
            <p class="text-secondary font-size-14 font-normal leading-normal italic text-center">Nenhum agendamento para a noite.</p>
          </div>
        </div>
      </div>
    </div>
    <div id="agendamentoModal" class="modal">
      <div class="modal-content">
        <span id="closeButton" class="close-button">×</span>
        <h2 id="modalTitle" class="text-dark font-size-24 font-bold leading-tight tracking-tight text-center margin-bottom-24">Cadastrar Novo Agendamento</h2>
        <div id="loading" class="loading">Carregando...</div>
        <div id="modalContent" class="hidden"> 
          <form id="agendamentoForm">
            <input type="hidden" id="id_usuario_hidden" name="id_usuario" value="">
            <input type="hidden" id="id_agendamento" name="id_agendamento" value="">
            <div class="form-group">
              <label for="categoria_atividade">Categoria da Atividade:</label>
              <select id="categoria_atividade" name="categoria_atividade" required>
                <option value="">Selecione uma categoria</option>
              </select>
            </div>
            <div class="form-group">
              <label for="id_atividade_select">Atividade:</label>
              <select id="id_atividade_select" name="id_atividade" required disabled>
                <option value="">Selecione uma categoria primeiro</option>
              </select>
            </div>
            <div class="form-group">
              <label for="nome_agendamento">Nome do Agendamento:</label>
              <input type="text" id="nome_agendamento" name="nome_agendamento" placeholder="Ex.: Corrida Matinal" required maxlength="100">
            </div>
            <div class="form-group">
              <label for="descricao">Descrição:</label>
              <textarea id="descricao" name="descricao" placeholder="Ex.: Correr ao ar livre no parque por 30 minutos" rows="4"></textarea>
            </div>
            <div class="form-group">
              <label for="data_agendamento_modal">Data:</label>
              <input type="date" id="data_agendamento_modal" name="data" required>
            </div>
            <div class="form-group">
              <label for="horario_inicio">Hora de Início:</label>
              <input type="time" id="horario_inicio" name="horario_inicio" required>
            </div>
            <div class="form-group">
              <label for="horario_fim">Hora de Fim:</label>
              <input type="time" id="horario_fim" name="horario_fim" required>
            </div>
            <div class="form-group">
              <label for="status">Status:</label>
              <select id="status" name="status">
                <option value="pendente">Pendente</option>
                <option value="concluido">Concluído</option>
                <option value="cancelado">Cancelado</option>
              </select>
            </div>
            <div class="form-actions">
              <button type="submit"
                class="flex-row max-width-480 cursor-pointer align-center justify-center overflow-hidden rounded-full height-40 bg-button-bg text-dark gap-8 font-size-14 font-bold leading-normal tracking-wide min-width-0 padding-x-10 margin-left-auto hover-bg-hover">
                Salvar Agendamento
              </button>
            </div>
          </form>
        </div>
        <div id="form-error" class="text-error font-size-14 margin-top-8 hidden"></div>
      </div>
    </div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      const today = new Date();
      let currentMonth = today.getMonth();
      let currentYear = today.getFullYear();
      let currentDay = today.getDate();
      let currentUserId = null;
      let atividadesDisponiveis = [];

      const modal = document.getElementById('agendamentoModal');
      const openModalBtn = document.getElementById('openModalBtn');
      const closeButton = document.getElementById('closeButton');
      const agendamentoForm = document.getElementById('agendamentoForm');
      const modalTitle = document.getElementById('modalTitle');
      const categoriaAtividadeSelect = document.getElementById('categoria_atividade');
      const idAtividadeSelect = document.getElementById('id_atividade_select');
      const idUsuarioHidden = document.getElementById('id_usuario_hidden');
      const idAgendamentoHidden = document.getElementById('id_agendamento');
      const horarioInicioInput = document.getElementById('horario_inicio');
      const horarioFimInput = document.getElementById('horario_fim');
      const errorDiv = document.getElementById('form-error');
      const loadingDiv = document.getElementById('loading');
      const modalContentDiv = document.getElementById('modalContent');
      const dataAgendamentoModalInput = document.getElementById('data_agendamento_modal');

      let isEditing = false;

      function updateCalendar() {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        document.getElementById('calendar-month').textContent = `${monthNames[currentMonth]} ${currentYear}`;
        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
        const firstDay = new Date(currentYear, currentMonth, 1).getDay();
        const calendarGrid = document.getElementById('calendar-grid');
        calendarGrid.innerHTML = '<p>S</p><p>M</p><p>T</p><p>W</p><p>T</p><p>F</p><p>S</p>';

        for (let i = 0; i < firstDay; i++) {
          const emptyCell = document.createElement('button');
          emptyCell.innerHTML = '<div></div>';
          calendarGrid.appendChild(emptyCell);
        }

        for (let day = 1; day <= daysInMonth; day++) {
          const button = document.createElement('button');
          button.innerHTML = `<div>${day}</div>`;
          if (day === currentDay && currentMonth === today.getMonth() && currentYear === today.getFullYear()) {
            button.classList.add('selected');
          }
          calendarGrid.appendChild(button);
        }
      }

      function initializeCalendarButtons() {
        const calendarButtons = document.querySelectorAll('.calendar-grid button');
        calendarButtons.forEach(button => {
          const dayDiv = button.querySelector('div');
          if (dayDiv.textContent) {
            button.addEventListener('click', () => {
              calendarButtons.forEach(btn => btn.classList.remove('selected'));
              button.classList.add('selected');
              currentDay = parseInt(dayDiv.textContent);
              const date = `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${dayDiv.textContent.padStart(2, '0')}`;
              if (currentUserId) {
                loadAgendamentosForSelectedDate(currentUserId, date);
              }
            });
          }
        });
      }

      document.getElementById('prev-month').addEventListener('click', () => {
        currentMonth--;
        if (currentMonth < 0) {
          currentMonth = 11;
          currentYear--;
        }
        updateCalendar();
        initializeCalendarButtons();
      });

      document.getElementById('next-month').addEventListener('click', () => {
        currentMonth++;
        if (currentMonth > 11) {
          currentMonth = 0;
          currentYear++;
        }
        updateCalendar();
        initializeCalendarButtons();
      });

      openModalBtn.onclick = async function () {
        modalTitle.textContent = 'Cadastrar Novo Agendamento';
        isEditing = false;
        agendamentoForm.reset();
        idAgendamentoHidden.value = '';
        modal.style.display = 'flex';
        loadingDiv.style.display = 'block';
        modalContentDiv.classList.add('hidden');
        errorDiv.classList.add('hidden');

        try {
          await loadCategorias();
          await loadAllAtividades();
          setMinDateForModal();
          dataAgendamentoModalInput.value = `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}`;
          modalContentDiv.classList.remove('hidden');
        } catch (err) {
          console.error('Erro ao preparar o modal:', err);
          errorDiv.textContent = 'Erro ao carregar dados para o agendamento: ' + err.message;
          errorDiv.classList.remove('hidden');
        } finally {
          loadingDiv.style.display = 'none';
        }
      };

      async function openEditModal(agendamento) {
        modalTitle.textContent = 'Editar Agendamento';
        isEditing = true;
        modal.style.display = 'flex';
        loadingDiv.style.display = 'block';
        modalContentDiv.classList.add('hidden');
        errorDiv.classList.add('hidden');

        try {
          await loadCategorias();
          await loadAllAtividades();
          idAgendamentoHidden.value = agendamento.id_agendamento;
          idUsuarioHidden.value = agendamento.id_usuario;
          categoriaAtividadeSelect.value = agendamento.atividade_categoria || '';
          categoriaAtividadeSelect.dispatchEvent(new Event('change'));
          idAtividadeSelect.value = agendamento.id_atividade || '';
          document.getElementById('nome_agendamento').value = agendamento.nome_agendamento || '';
          document.getElementById('descricao').value = agendamento.descricao || '';
          dataAgendamentoModalInput.value = agendamento.data || '';
          horarioInicioInput.value = agendamento.horario_inicio ? agendamento.horario_inicio.substring(0, 5) : '';
          horarioFimInput.value = agendamento.horario_fim ? agendamento.horario_fim.substring(0, 5) : '';
          document.getElementById('status').value = agendamento.status || 'pendente';
          setMinDateForModal();
          modalContentDiv.classList.remove('hidden');
        } catch (err) {
          console.error('Erro ao preparar o modal para edição:', err);
          errorDiv.textContent = 'Erro ao carregar dados para edição: ' + err.message;
          errorDiv.classList.remove('hidden');
        } finally {
          loadingDiv.style.display = 'none';
        }
      }

      closeButton.onclick = function () {
        modal.style.display = 'none';
        agendamentoForm.reset();
        idAgendamentoHidden.value = '';
        categoriaAtividadeSelect.innerHTML = '<option value="">Selecione uma categoria</option>';
        idAtividadeSelect.innerHTML = '<option value="">Selecione uma categoria primeiro</option>';
        idAtividadeSelect.disabled = true;
        errorDiv.classList.add('hidden');
        loadingDiv.style.display = 'none';
        modalContentDiv.classList.add('hidden');
        isEditing = false;
        modalTitle.textContent = 'Cadastrar Novo Agendamento';
      };

      window.onclick = function (event) {
        if (event.target == modal) {
          closeButton.onclick();
        }
      };

      function setMinDateForModal() {
        const today = new Date().toISOString().split('T')[0];
        dataAgendamentoModalInput.setAttribute('min', today);
      }

      async function getUserIdFromSession() {
        try {
          const response = await fetch('/api/user/session', { credentials: 'include' });
          if (!response.ok) {
            if (response.status === 401) {
              window.location.href = '/login';
              return null;
            }
            throw new Error('Erro ao obter ID do usuário da sessão');
          }
          const data = await response.json();
          currentUserId = data.id_usuario;
          idUsuarioHidden.value = data.id_usuario;
          return data.id_usuario;
        } catch (error) {
          console.error('Erro ao buscar ID do usuário:', error.message);
          window.location.href = '/login';
          return null;
        }
      }

      async function loadCategorias() {
        errorDiv.classList.add('hidden');
        const response = await fetch('/api/atividade/categorias', { credentials: 'include' });
        if (!response.ok) {
          if (response.status === 401) {
            throw new Error('Não autorizado. Redirecionando para login.');
          }
          const errorData = await response.json();
          throw new Error(errorData.error || `Erro ao carregar categorias: ${response.statusText}`);
        }
        const categorias = await response.json();
        categoriaAtividadeSelect.innerHTML = '<option value="">Selecione uma categoria</option>';
        if (Array.isArray(categorias) && categorias.length > 0) {
          categorias.forEach(cat => {
            const option = document.createElement('option');
            option.value = cat.categoria;
            option.textContent = cat.categoria;
            categoriaAtividadeSelect.appendChild(option);
          });
        } else {
          const option = document.createElement('option');
          option.value = '';
          option.textContent = 'Nenhuma categoria disponível';
          option.disabled = true;
          categoriaAtividadeSelect.appendChild(option);
        }
      }

      async function loadAllAtividades() {
        errorDiv.classList.add('hidden');
        const response = await fetch('/api/atividade/usuario', { credentials: 'include' });
        if (!response.ok) {
          if (response.status === 401) {
            throw new Error('Não autorizado. Redirecionando para login.');
          }
          const errorData = await response.json();
          throw new Error(errorData.error || `Erro ao carregar atividades: ${response.statusText}`);
        }
        atividadesDisponiveis = await response.json();
      }

      async function loadAgendamentosForSelectedDate(userId, date) {
        try {
          const response = await fetch(`/api/agendamentos/dia?data=${date}`, { credentials: 'include' });
          if (!response.ok) {
            if (response.status === 401) {
              window.location.href = '/login';
              return;
            }
            throw new Error(`Erro ao buscar agendamentos do dia: ${response.statusText}`);
          }
          const agendamentos = await response.json();
          renderAgendamentos(agendamentos);
        } catch (error) {
          console.error('Erro ao carregar agendamentos:', error.message);
        }
      }

      function formatDate(date) {
        if (!date) return 'Sem data';
        const d = new Date(date + 'T00:00:00');
        if (isNaN(d.getTime())) return 'Data inválida';
        const year = d.getFullYear();
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        return `${day}/${month}/${year}`;
      }

      function calculateTextColor(hexColor) {
        const hex = hexColor.replace('#', '');
        const r = parseInt(hex.substring(0, 2), 16) / 255;
        const g = parseInt(hex.substring(2, 4), 16) / 255;
        const b = parseInt(hex.substring(4, 6), 16) / 255;
        const luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;
        return luminance > 0.5 ? '#1B0E0E' : '#FFFFFF';
      }

      async function deleteAgendamento(idAgendamento) {
        if (!confirm('Tem certeza que deseja excluir este agendamento?')) {
          return;
        }
        try {
          const response = await fetch(`/api/agendamento/${idAgendamento}`, {
            method: 'DELETE',
            credentials: 'include'
          });
          if (!response.ok) {
            if (response.status === 401) {
              window.location.href = '/login';
              return;
            }
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao deletar agendamento');
          }
          alert('Agendamento excluído com sucesso!');
          await loadAgendamentosForSelectedDate(currentUserId, `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}`);
        } catch (error) {
          console.error('Erro ao deletar agendamento:', error.message);
          alert('Erro ao excluir agendamento: ' + error.message);
        }
      }

      function createAgendamentoCard(agendamento) {
        const card = document.createElement('div');
        card.className = 'agendamento-card';
        card.dataset.id = agendamento.id_agendamento;
        const activityColor = agendamento.atividade_cor_categoria || '#6c757d';
        card.style.setProperty('--card-border-color', activityColor);
        const textColor = calculateTextColor(activityColor);
        card.innerHTML = `
          <div class="card-header">
            <h4>${agendamento.nome_agendamento || 'Agendamento sem nome'}</h4>
            <div class="card-actions">
              <button class="edit-button" title="Editar agendamento">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M3 17.25V21H6.75L17.81 9.94L14.06 6.19L3 17.25ZM20.71 7.04C21.1 6.65 21.1 6.02 20.71 5.63L18.37 3.29C17.98 2.9 17.35 2.9 16.96 3.29L15.13 5.12L18.88 8.87L20.71 7.04Z" fill="#994D4F"/>
                </svg>
              </button>
              <button class="delete-button" title="Excluir agendamento">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M6 19C6 20.1 6.9 21 8 21H16C17.1 21 18 20.1 18 19V7H6V19ZM19 4H15.5L14.5 3H9.5L8.5 4H5V6H19V4Z" fill="#994D4F"/>
                </svg>
              </button>
            </div>
          </div>
          <p>Atividade: ${agendamento.atividade_nome || 'Sem atividade'}</p>
          <p>${agendamento.descricao || 'Sem descrição'}</p>
          <div class="time-status">
            <span>Data: ${formatDate(agendamento.data)}</span>
            <span>Início: ${agendamento.horario_inicio ? agendamento.horario_inicio.substring(0, 5) : 'Sem horário'}</span>
            <span>Fim: ${agendamento.horario_fim ? agendamento.horario_fim.substring(0, 5) : 'Sem horário'}</span>
          </div>
          <div class="time-status">
            <span>Status: ${agendamento.status ? agendamento.status.charAt(0).toUpperCase() + agendamento.status.slice(1) : 'Pendente'}</span>
          </div>
          <span class="category-tag" style="--category-bg-color: ${activityColor}; color: ${textColor};">
            ${agendamento.atividade_categoria || 'Sem Categoria'}
          </span>
        `;
        card.querySelector('.edit-button').addEventListener('click', () => {
          openEditModal(agendamento);
        });
        card.querySelector('.delete-button').addEventListener('click', () => {
          deleteAgendamento(agendamento.id_agendamento);
        });
        return card;
      }

      function renderAgendamentos(agendamentos) {
        const manhaDiv = document.getElementById('agendamentosManha');
        const tardeDiv = document.getElementById('agendamentosTarde');
        const noiteDiv = document.getElementById('agendamentosNoite');
        manhaDiv.innerHTML = '<p class="text-secondary font-size-14 font-normal leading-normal italic text-center">Nenhum agendamento para a manhã.</p>';
        tardeDiv.innerHTML = '<p class="text-secondary font-size-14 font-normal leading-normal italic text-center">Nenhum agendamento para a tarde.</p>';
        noiteDiv.innerHTML = '<p class="text-secondary font-size-14 font-normal leading-normal italic text-center">Nenhum agendamento para a noite.</p>';
        let hasManha = false, hasTarde = false, hasNoite = false;
        if (!Array.isArray(agendamentos) || agendamentos.length === 0) {
          return;
        }
        agendamentos.sort((a, b) => {
          if (!a.horario_inicio || !b.horario_inicio) return 0;
          return a.horario_inicio.localeCompare(b.horario_inicio);
        });
        agendamentos.forEach(agendamento => {
          const card = createAgendamentoCard(agendamento);
          const [hour] = (agendamento.horario_inicio || '00:00').split(':').map(Number);
          if (hour >= 0 && hour < 12) {
            if (!hasManha) { manhaDiv.innerHTML = ''; hasManha = true; }
            manhaDiv.appendChild(card);
          } else if (hour >= 12 && hour < 18) {
            if (!hasTarde) { tardeDiv.innerHTML = ''; hasTarde = true; }
            tardeDiv.appendChild(card);
          } else {
            if (!hasNoite) { noiteDiv.innerHTML = ''; hasNoite = true; }
            noiteDiv.appendChild(card);
          }
        });
      }

      categoriaAtividadeSelect.addEventListener('change', () => {
        const selectedCategory = categoriaAtividadeSelect.value;
        idAtividadeSelect.innerHTML = '<option value="">Selecione uma atividade</option>';
        idAtividadeSelect.disabled = !selectedCategory;
        if (selectedCategory) {
          const filteredActivities = atividadesDisponiveis.filter(act => act.categoria === selectedCategory);
          if (filteredActivities.length > 0) {
            filteredActivities.forEach(act => {
              const option = document.createElement('option');
              option.value = act.id_atividade;
              option.textContent = act.nome;
              idAtividadeSelect.appendChild(option);
            });
          } else {
            idAtividadeSelect.innerHTML = '<option value="">Nenhuma atividade para esta categoria</option>';
            idAtividadeSelect.disabled = true;
          }
        }
      });

      horarioFimInput.addEventListener('change', () => {
        const inicio = horarioInicioInput.value;
        const fim = horarioFimInput.value;
        if (inicio && fim && fim <= inicio) {
          errorDiv.textContent = 'Hora de fim deve ser posterior à hora de início.';
          errorDiv.classList.remove('hidden');
        } else {
          errorDiv.classList.add('hidden');
        }
      });

      idAtividadeSelect.addEventListener('change', () => {
        const selectedActivityId = idAtividadeSelect.value;
        if (selectedActivityId && !isEditing) {
          const selectedActivity = atividadesDisponiveis.find(act => act.id_atividade == selectedActivityId);
          if (selectedActivity) {
            document.getElementById('nome_agendamento').value = selectedActivity.nome;
          }
        }
      });

      agendamentoForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        errorDiv.classList.add('hidden');
        loadingDiv.style.display = 'block';
        const id_usuario = parseInt(idUsuarioHidden.value);
        const id_atividade = parseInt(idAtividadeSelect.value);
        const nome_agendamento = document.getElementById('nome_agendamento').value.trim();
        const descricao = document.getElementById('descricao').value.trim() || null;
        const data = dataAgendamentoModalInput.value;
        const horario_inicio = horarioInicioInput.value;
        const horario_fim = horarioFimInput.value;
        const status = document.getElementById('status').value;
        if (isNaN(id_usuario)) {
          errorDiv.textContent = 'ID de usuário inválido. Por favor, faça login novamente.';
          errorDiv.classList.remove('hidden');
          loadingDiv.style.display = 'none';
          return;
        }
        if (isNaN(id_atividade)) {
          errorDiv.textContent = 'Por favor, selecione uma atividade válida.';
          errorDiv.classList.remove('hidden');
          loadingDiv.style.display = 'none';
          return;
        }
        if (!nome_agendamento) {
          errorDiv.textContent = 'Nome do agendamento é obrigatório.';
          errorDiv.classList.remove('hidden');
          loadingDiv.style.display = 'none';
          return;
        }
        if (horario_fim <= horario_inicio) {
          errorDiv.textContent = 'Hora de fim deve ser posterior à hora de início.';
          errorDiv.classList.remove('hidden');
          loadingDiv.style.display = 'none';
          return;
        }
        const agendamentoData = {
          id_usuario,
          id_atividade,
          nome_agendamento,
          data,
          descricao,
          horario_inicio,
          horario_fim,
          status
        };
        try {
          const url = isEditing ? `/api/agendamento/${idAgendamentoHidden.value}` : '/api/agendamento';
          const method = isEditing ? 'PUT' : 'POST';
          const response = await fetch(url, {
            method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(agendamentoData),
            credentials: 'include'
          });
          if (!response.ok) {
            if (response.status === 401) {
              window.location.href = '/login';
              return;
            }
            const errorData = await response.json();
            throw new Error(errorData.error || `Erro ao ${isEditing ? 'atualizar' : 'salvar'} agendamento`);
          }
          const result = await response.json();
          closeButton.onclick();
          await loadAgendamentosForSelectedDate(currentUserId, `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}`);
          alert(`Agendamento ${isEditing ? 'atualizado' : 'salvo'} com sucesso!`);
        } catch (error) {
          console.error(`Erro ao ${isEditing ? 'atualizar' : 'salvar'} agendamento:`, error.message);
          errorDiv.textContent = error.message;
          errorDiv.classList.remove('hidden');
        } finally {
          loadingDiv.style.display = 'none';
        }
      });

      async function initializePage() {
        const userId = await getUserIdFromSession();
        if (userId) {
          await loadAllAtividades();
          const initialDate = `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}`;
          await loadAgendamentosForSelectedDate(userId, initialDate);
        }
        updateCalendar();
        initializeCalendarButtons();
      }

      initializePage();
    });
  </script>
</body>
</html>